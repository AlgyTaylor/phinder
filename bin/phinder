#!/usr/bin/env php
<?php

foreach ([__DIR__ . '/../../../autoload.php', __DIR__ . '/../vendor/autoload.php'] as $file) {
    if (file_exists($file)) {
        require $file;
        break;
    }
}

use function Phinder\phind;
use Phinder\Error\{FileNotFound, InvalidPattern, InvalidRule, InvalidYaml};
use PhpParser\Error;


$phpPath = '.';
$rulePath = 'phinder.yml';
$jsonOutput = false;
$outputBuffer = ['issues' => [], 'errors' => []];
$command = null;

function showHelp() {
    exit(1);
}

array_shift($argv);
while ($argv) {
    $a = array_shift($argv);
    switch ($a) {
        case '-q':
        case '--quicktest':
            $command = array_shift($argv);
            if ($command === null) showHelp();
            break;

        case '-j':
        case '--json':
            $jsonOutput = true;
            break;

        case '-p':
        case '--php':
            $phpPath = array_shift($argv);
            if ($phpPath === null) showHelp();
            break;

        case '-r':
        case '--rule':
            $rulePath = array_shift($argv);
            if ($rulePath === null) showHelp();
            break;

        default:
            showHelp();
    }
}

if ($command !== null) {
    $tmp = tmpfile();
    $rulePath = stream_get_meta_data($tmp)['uri'];
    fwrite($tmp, "- id: ''\n  pattern: $command\n  message: ''");
}

try {
    foreach (phind($rulePath, $phpPath) as $match) {
        $path = (string)$match->path;
        $id = $match->rule->id;
        $message  = $match->rule->message;
        $startLine = (int)$match->xml['startLine'];
        $startLinePos = (int)$match->xml['startLinePosition'];
        $startFilePos = (int)$match->xml['startFilePosition'];
        $endLine = (int)$match->xml['endLine'];
        $endLinePos = (int)$match->xml['endLinePosition'];
        $endFilePos = (int)$match->xml['endFilePosition'];

        $code = @file_get_contents($match->path, NULL, NULL, $startFilePos, $endFilePos-$startFilePos+1);
        $code = str_replace("\n", '\n', $code);

        if ($jsonOutput) {
            $outputBuffer['issues'][] = [
                'path' => $path,
                'rule' => [
                    'id' => $id,
                    'message' => $message,
                ],
                'location' => [
                    'start' => [$startLine, $startLinePos],
                    'end' => [$endLine, $endLinePos]
                ]
            ];
        } else {
            echo "$path:$startLine:$startLinePos\t\033[31m$code\033[0m\t";
            echo ($id === '')? "\n" : "$message ($id)\n";
        }
    }

} catch (FileNotFound $e) {
    $msg = "File not found: {$e->path}";
    if ($jsonOutput) {
        $outputBuffer['errors'][] = [
            'type' => 'FileNotFound',
            'message' => $msg
        ];
    } else {
        fwrite(STDERR, "$msg\n");
        exit(1);
    }

} catch (InvalidPattern $e) {
    $msg = "Invalid pattern found in {$e->id} in {$e->path}: {$e->pattern}";
    if ($jsonOutput) {
        $outputBuffer['errors'][] = [
            'type' => 'InvalidPattern',
            'message' => $msg
        ];
    } else {
        fwrite(STDERR, "$msg\n");
        exit(1);
    }

} catch (InvalidRule $e) {
    $sufs = ['st', 'nd', 'rd', 'th', 'th', 'th', 'th', 'th', 'th'];
    $ord = "{$e->index}{$sufs[$e->index % 10 - 1]}";
    $msg = "Invalid {$e->key} value found in {$ord} rule in {$e->path}";

    if ($jsonOutput) {
        $outputBuffer['errors'][] = [
            'type' => 'InvalidRule',
            'message' => $msg
        ];
    } else {
        fwrite(STDERR, "$msg\n");
        exit(1);
    }

} catch (InvalidYaml $e) {
    $msg = "Invalid yml file: {$e->path}";

    if ($jsonOutput) {
        $outputBuffer['errors'][] = [
            'type' => 'InvalidYaml',
            'message' => $msg
        ];
    } else {
        fwrite(STDERR, "$msg\n");
        exit(1);
    }

}

if ($jsonOutput) {
    echo json_encode($outputBuffer, JSON_UNESCAPED_SLASHES);
}
