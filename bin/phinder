#!/usr/bin/env php
<?php

foreach ([__DIR__ . '/../../../autoload.php', __DIR__ . '/../vendor/autoload.php'] as $file) {
    if (file_exists($file)) {
        require $file;
        break;
    }
}

use function Phinder\phind;
use Phinder\Error\{FileNotFound, InvalidPattern, InvalidRule, InvalidYaml};


$defaults = ['r' => getcwd(), 'p' => getcwd()];

$options = getopt("r:p:");
$options = array_merge($defaults, $options);

try {
    foreach (phind($options['r'], $options['p']) as $match) {
        $start = (int)$match->xml['startFilePosition'];
        $end = (int)$match->xml['endFilePosition'];
        $code = @file_get_contents($match->path, NULL, NULL, $start, $end-$start+1);
        $code = str_replace("\n", '\n', $code);
        echo "{$match->path}:{$match->xml['startLine']}:{$match->xml['startLinePosition']}\t\033[31m$code\033[0m\t{$match->rule->message} ({$match->rule->id})\n";
    }

} catch (FileNotFound $e) {
    fwrite(STDERR, "File not found: {$e->path}\n");
    exit(1);

} catch (InvalidPattern $e) {
    fwrite(STDERR, "Invalid pattern found in {$e->id} in {$e->path}: {$e->pattern}\n");
    exit(1);

} catch (InvalidRule $e) {
    $sufs = ['st', 'nd', 'rd', 'th', 'th', 'th', 'th', 'th', 'th'];
    $ord = "{$e->index}{$sufs[$e->index % 10 - 1]}";
    fwrite(STDERR, "Invalid {$e->key} value found in {$ord} rule in {$e->path}\n");
    exit(1);

} catch (InvalidYaml $e) {
    fwrite(STDERR, "Invalid yml file: {$e->path}\n");
    exit(1);

}
